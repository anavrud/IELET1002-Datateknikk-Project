
//Bibliotek for WiFi
#include <WiFi.h>
#include <WebServer.h>

//Bibliotek for klokke
#include <time.h>

//Bibliotek for temp sensor
#include <DHT.h>
#define DHT_SENSOR_PIN  27 // ESP32 pin GIOP21 connected to DHT11 sensor
#define DHT_SENSOR_TYPE DHT11

//Bibliotek for display:
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

//Bibliotek for OLED display
#define OLED_RESET 4 
Adafruit_SSD1306 display(OLED_RESET);

// SSID & Password - hjemme
//const char* ssid = "****";  // Enter your SSID here
//const char* password = "****";  //Enter your Password here

//Server oppsett
WebServer server(80);  // Object of WebServer(HTTP port, 80 is defult)

//Temp sensor oppsett
DHT dht_sensor(DHT_SENSOR_PIN, DHT_SENSOR_TYPE);

//LED Terminals
const int redLED = 26;
const int greenLED = 25;
const int blueLED = 33;

//Button terminal
const int buttonPin = 35;

//Switch-case default
int var = 1;

//Channels
const int channelRedLED = 0;
const int channelGreenLED = 1;
const int channelBlueLED = 2;
const int channelBuzzer = 5;

//Tid-takings variabler
int period = 2000;
unsigned long time_now = 0;
unsigned long wait = 0;
unsigned long previousMillis = 0;
unsigned long previousMillis2 = 0;

//Definerer temp/humi-sensor variabler
float humi = 0;
float tempC = 0;
float tempF = 0;

//Klokke - variabler
int hoursOffset = 1; //One hour for Norway
int GMTOffset = (hoursOffset*60*60);  //Replace with your GMT Offset in seconds
int daylightOffset = 3600;  //Replace with your daylight savings offset in seconds
//3600 or 0


//Fire sensor variabler
const int fireSensor = 13;

//Buzzer variabel
const int buzzerPin = 12;


//Local network sensordata
String refreshWebData() {
  float sensorDataArr[2];
  sensorDataArr[0] = dht_sensor.readHumidity();
  sensorDataArr[1] = dht_sensor.readTemperature();
  
  //Serial.println(sensorDataArr[0]);
  //Serial.println(sensorDataArr[1]);

  String HTMLdata = "<!DOCTYPE html>"
  "<html>"
  "<head>"
  "<title>Sensordata</title>"
  "<meta http-equiv='refresh' content='0.5'>"
  "</head>"
  "<body>"
  "<h1>Sensordata:</h1>"
  "</body>"
  "</html>";

  HTMLdata += "<h2>Humidity: ";
  HTMLdata += sensorDataArr[0];
  HTMLdata += " %";
  HTMLdata += "</h2>";
  HTMLdata += "<h2>Temperature: ";
  HTMLdata += sensorDataArr[1];
  HTMLdata += " C";
  HTMLdata += "</h2>";

  return HTMLdata;
}



//Local network server refresh
void handle_root() {
  server.send(200, "text/html", refreshWebData());
}



//Setup og konfigurering
void setup() {
  Serial.begin(115200);
  Serial.println("Try Connecting to ");
  Serial.println(ssid);

  // Connect to your wi-fi modem
  WiFi.begin(ssid, password);

  // Check wi-fi is connected to wi-fi network
  while (WiFi.status() != WL_CONNECTED) {
  delay(1000);
  Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected successfully");
  Serial.print("Got IP: ");
  Serial.println(WiFi.localIP());  //Show ESP32 IP on serial
  delay(3000); //Delay som gir oss tid til å kopiere IP - kan slettes
  server.on("/", handle_root);

  //Skrur på server
  server.begin();
  Serial.println("HTTP server started");
  delay(100); 

  
  dht_sensor.begin(); // initialize the DHT sensor


  //Setter opp LED lys OUTPUTS og kanaler
  pinMode(redLED, OUTPUT);
  pinMode(greenLED, OUTPUT);
  pinMode(blueLED,  OUTPUT);


  //Setter opp button
  pinMode(buttonPin,  INPUT);

//Setter opp RedLED
  ledcSetup(channelRedLED, 2000, 8);
  ledcAttachPin(redLED, channelRedLED);
  ledcWrite(channelRedLED, 0);
  
  ledcSetup(channelGreenLED, 2000, 8);
  ledcAttachPin(greenLED, channelGreenLED);
  ledcWrite(channelGreenLED, 0);
 
  ledcSetup(channelBlueLED, 2000, 8);
  ledcAttachPin(blueLED, channelBlueLED);
  ledcWrite(channelBlueLED, 0);

  //Skru på OLED skjerm
  Wire.begin();
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);

  //Konfigurer klokke
  configTime(GMTOffset, daylightOffset, "pool.ntp.org","time.nist.gov");

  //Setter opp buzzer med PWM
  pinMode(buzzerPin, OUTPUT);
  ledcSetup(channelBuzzer, 2000, 8);
  ledcAttachPin(buzzerPin, channelBuzzer);
  ledcWrite(channelBuzzer, 0);

  //Setter opp fire-sensor pin
  pinMode(fireSensor, INPUT);
}




//Lokalt display for temp og humidity 
void displayTemp() {
  float humiDisp  = dht_sensor.readHumidity();
  float tempDisp = dht_sensor.readTemperature();

  // Klargør display
  display.clearDisplay();
  //Setter farge
  display.setTextColor(WHITE);
  //Setter skriftstørelsen
  display.setTextSize(1);
  //Setter pekerkoordinater
  display.setCursor(0,0);
  display.print("Temperature: ");
  display.print(tempDisp);
  display.print(" C");
  display.setCursor(0,10);  
  display.print("Humidity:    ");
  display.print(humiDisp);
  display.print(" %");
}



//Lokalt display testside
void displayTest() {
  time_t rawtime = time(nullptr);
  struct tm* timeinfo = localtime(&rawtime);
  
  display.clearDisplay();
  
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  display.print("The time is:");
  
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(40,10);
  display.print(timeinfo->tm_hour);
  display.print(":");
  if( timeinfo->tm_min <10)
  display.print("0");
  display.print(timeinfo->tm_min);
}

//Lokalt display brannalarm
void displayFire() {
  time_t rawtime = time(nullptr);
  struct tm* timeinfo = localtime(&rawtime);
  
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(40,10);
  display.print("FIRE!");
}



void fireSensorProcessing() {
  int fireSensorDetect = digitalRead(fireSensor);
  if(fireSensorDetect == 1) {
    Serial.println("FIRE!!!!!");
    Serial.println(fireSensorDetect);
    ledcWrite(channelRedLED, 255);
    ledcWrite(channelGreenLED, 0);
    ledcWrite(channelBlueLED, 0);
    //var = 3,
    ledcWriteTone(channelBuzzer, 1000);
    displayFire();
    display.display();
    delay(5000);
    //var = 1;
    ledcWriteTone(channelBuzzer, 0);
  }
}




//Hovedprogram
void loop() {
  
  //Holder serveren gående
  server.handleClient();

  //Refresher data på server
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= 500) {
    previousMillis = currentMillis;
    server.send(200, "text/html", refreshWebData());
  }
  
  // read humidity
  humi  = dht_sensor.readHumidity();
  // read temperature in Celsius
  tempC = dht_sensor.readTemperature();
  // read temperature in Fahrenheit
  tempF = dht_sensor.readTemperature(true);

  // check whether the reading is successful or not

  //Printer data til serial monitor
  if(millis() >= time_now + period) {
    time_now += period;
    if ( isnan(tempC) || isnan(tempF) || isnan(humi)) {
      Serial.println("Failed to read from DHT sensor!");
    } else {
      Serial.print("Humidity: ");
      Serial.print(humi);
      Serial.print("%");
  
      Serial.print("  |  ");
  
      Serial.print("Temperature: ");
      Serial.print(tempC);
      Serial.print("°C  ~  ");
      Serial.print(tempF);
      Serial.println("°F");
    }
  }

  //Lokalt LED lys for visuell feedback
  //Indicates normal temp
  if(tempC < 26.00 && tempC > 15.00)  {
    ledcWrite(channelRedLED, 0);
    ledcWrite(channelGreenLED, 255);
    ledcWrite(channelBlueLED, 0);
  }
  if(tempC >= 26.00)  { //Indicates hot temp
    ledcWrite(channelRedLED, 255);
    ledcWrite(channelGreenLED, 0);
    ledcWrite(channelBlueLED, 0);
  }
  if(tempC <= 15.00)  {  //Indicates cold temp
    ledcWrite(channelRedLED, 0);
    ledcWrite(channelGreenLED, 0);
    ledcWrite(channelBlueLED, 255);
  }

  fireSensorProcessing();
  
  //Kaller på display-funksjon
  switch(var) {
    case 1:
      displayTemp();
      display.display();
      break;
    case 2:
      displayTest();
      display.display();
      break;
//    case 3:
//      displayFire();
//      display.display();
//      break;
  }
  
  if (digitalRead(buttonPin) == LOW) {
//    while (digitalRead(buttonPin) == LOW) {
//    }
    if (var == 1) {
      var = 2;
    }
//    else if (var == 2) {
//      var = 3;
//    }
//    else if (var == 3) {
//      var = 4;
//    }
    else  {
      var = 1;
    }
  }
}
